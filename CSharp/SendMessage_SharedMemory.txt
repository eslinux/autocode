




//////////////////////Form1 Sender////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.MemoryMappedFiles;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace App_win1
{
    public partial class Form1 : Form
    {

        public class MessageHelper
        {
            [DllImport("User32.dll")]
            private static extern int RegisterWindowMessage(string lpString);

            [DllImport("User32.dll", EntryPoint = "FindWindow")]
            public static extern Int32 FindWindow(String lpClassName, String lpWindowName);

            //For use with WM_COPYDATA and COPYDATASTRUCT
            [DllImport("User32.dll", EntryPoint = "SendMessage")]
            public static extern int SendMessage(int hWnd, int Msg, int wParam, ref COPYDATASTRUCT lParam);
            

            //For use with WM_COPYDATA and COPYDATASTRUCT
            [DllImport("User32.dll", EntryPoint = "PostMessage")]
            public static extern int PostMessage(int hWnd, int Msg, int wParam, ref COPYDATASTRUCT lParam);

            [DllImport("User32.dll", EntryPoint = "SendMessage")]
            public static extern int SendMessage(int hWnd, int Msg, int wParam, int lParam);

            [DllImport("User32.dll", EntryPoint = "PostMessage")]
            public static extern int PostMessage(int hWnd, int Msg, int wParam, int lParam);

            [DllImport("User32.dll", EntryPoint = "SetForegroundWindow")]
            public static extern bool SetForegroundWindow(int hWnd);

            public const int WM_USER = 0x400;
            public const int WM_COPYDATA = 0x4A;
            public const int WM_USER1 = 0x4B;
            public const int WM_USER2 = 0x4C;


            //Used for WM_COPYDATA for string messages
            public struct COPYDATASTRUCT
            {
                public IntPtr dwData;
                public int cbData;
                [MarshalAs(UnmanagedType.LPStr)]
                public string lpData;
            }

            public struct COPYDATASTRUCT2
            {
                public string lpData;
            }

            public bool bringAppToFront(int hWnd)
            {
                return SetForegroundWindow(hWnd);
            }

            public int sendWindowsStringMessage(int hWnd, int wParam, string msg)
            {
                int result = 0;

                if (hWnd > 0)
                {
                    byte[] sarr = System.Text.Encoding.Default.GetBytes(msg);
                    int len = sarr.Length;
                    COPYDATASTRUCT cds;
                    cds.dwData = new IntPtr(WM_COPYDATA);// (IntPtr)100;
                    cds.lpData = msg;
                    cds.cbData = len + 1;
                    result = SendMessage(hWnd, WM_COPYDATA, wParam, ref cds);
                }

                return result;
            }

           

            public int sendWindowsMessage(int hWnd, int Msg, int wParam, int lParam)
            {
                int result = 0;

                if (hWnd > 0)
                {
                    result = SendMessage(hWnd, Msg, wParam, lParam);
                }

                return result;
            }

            public int getWindowId(string className, string windowName)
            {
                return FindWindow(className, windowName);
            }
        }


        [Serializable]  // mandatory
        class MessageTest
        {
            public string title;
            public string content;
        }

        struct MessageTest_t
        {
            public int id1;
            public int id2;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public Form1()
        {
            InitializeComponent();
        }


        /// <summary>
        /// OnLoad: Create shared memory maps
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form1_Load(object sender, EventArgs e)
        {
#if false
            const int MMF_MAX_SIZE = 1024;  // allocated memory for this memory mapped file (bytes)
            const int MMF_VIEW_SIZE = 1024; // how many bytes of the allocated memory can this process access

            // creates the memory mapped file which allows 'Reading' and 'Writing'
            MemoryMappedFile mmf = MemoryMappedFile.CreateOrOpen("mmf1", MMF_MAX_SIZE, MemoryMappedFileAccess.ReadWrite);

            // creates a stream for this process, which allows it to write data from offset 0 to 1024 (whole memory)
            MemoryMappedViewStream mmvStream = mmf.CreateViewStream(0, MMF_VIEW_SIZE);

            // this is what we want to write to the memory mapped file
            MessageTest message1 = new MessageTest
            {
                title = "test",
                content = "hello world"
            };

            //var memoryStream = new MemoryStream();
            //var binaryFormatter = new BinaryFormatter();
            //binaryFormatter.Serialize(memoryStream, message1);
            

            // serialize the variable 'message1' and write it to the memory mapped file
            BinaryFormatter formatter = new BinaryFormatter();
            formatter.Serialize(mmvStream, message1);

            // sets the current position back to the beginning of the stream
            mmvStream.Seek(0, SeekOrigin.Begin);

#else


            //Create or open MMF
            MemoryMappedFile mmf = MemoryMappedFile.CreateOrOpen("test", 1000);
            MemoryMappedViewAccessor accessor = mmf.CreateViewAccessor();

            //Write data to pos 500
            accessor.Write(500, 42);

            //Write data to pos 504
            MessageTest_t message1 = new MessageTest_t
            {
                id1 = 123,
                id2 = 456
            };
            accessor.Write<MessageTest_t>(504, ref message1);

            //Write data to pos 520 and 522
            byte[] Buffer = ASCIIEncoding.ASCII.GetBytes("Hello");
            accessor.Write(520, (ushort)Buffer.Length);
            accessor.WriteArray(520 + 2, Buffer, 0, Buffer.Length);

            //accessor.Dispose();
            //mmf.Dispose();
#endif
        }

        /// <summary>
        /// Send message to other window
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_send_Click(object sender, EventArgs e)
        {


            MessageHelper msg = new MessageHelper();
            int result = 0;
            //First param can be null
            int hWnd = msg.getWindowId(null, "Form2");

            //Send msg with string data
            result = msg.sendWindowsStringMessage(hWnd, 0, "Some_String_Message");
            //Or for an integer message
            result = msg.sendWindowsMessage(hWnd, MessageHelper.WM_USER, 123, 456);

            result = msg.sendWindowsMessage(hWnd, MessageHelper.WM_USER1, 123, 456);
            
        }

    }
}




//////////////////////Form2 - Recv//////////////////////////////
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.IO.MemoryMappedFiles;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace App_win2
{
    public partial class Form2 : Form
    {

        public const int WM_USER = 0x400;
        public const int WM_COPYDATA = 0x4A;
        public const int WM_USER1 = 0x4B;
        public const int WM_USER2 = 0x4C;


        //Used for WM_COPYDATA for string messages
        public struct COPYDATASTRUCT
        {
            public IntPtr dwData;
            public int cbData;
            [MarshalAs(UnmanagedType.LPStr)]
            public string lpData;
        }

        [Serializable]  // mandatory
        class MessageTest
        {
            public string title;
            public string content;
        }

        struct MessageTest_t
        {
            public int id1;
            public int id2;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public Form2()
        {
            InitializeComponent();
        }

        private void Form2_Load(object sender, EventArgs e)
        {
            textBox1.Text = "";
        }

       
        /// <summary>
        /// Recv window message
        /// </summary>
        /// <param name="m"></param>
        protected override void WndProc(ref Message m)
        {
            

            switch (m.Msg)
            {
                case WM_USER:

                    textBox1.Text += m.Msg.ToString() + ", Message recieved: " + m.WParam + " - " + m.LParam + "\n";
                    break;
                case WM_COPYDATA:

                    COPYDATASTRUCT mystr = new COPYDATASTRUCT();
                    Type mytype = mystr.GetType();
                    mystr = (COPYDATASTRUCT)m.GetLParam(mytype);
                    textBox1.Text += m.Msg.ToString() + ", Message recieved: " + mystr.lpData + "\n";
                    
                    break;
                case WM_USER1:
                    ReadData_CreateViewAccessor();
                    break;
               

            }
            base.WndProc(ref m);
        }


        void ReadData_CreateViewStream()
        {
            const int MMF_MAX_SIZE = 1024;  // allocated memory for this memory mapped file (bytes)
            const int MMF_VIEW_SIZE = 1024; // how many bytes of the allocated memory can this process access

            // creates the memory mapped file
            MemoryMappedFile mmf = MemoryMappedFile.OpenExisting("mmf1");
            MemoryMappedViewStream mmvStream = mmf.CreateViewStream(0, MMF_VIEW_SIZE); // stream used to read data

            BinaryFormatter formatter = new BinaryFormatter();

            // needed for deserialization
            byte[] buffer = new byte[MMF_VIEW_SIZE];

            MessageTest message1;

            // reads every second what's in the shared memory
            while (mmvStream.CanRead)
            {
                // stores everything into this buffer
                mmvStream.Read(buffer, 0, MMF_VIEW_SIZE);

                // deserializes the buffer & prints the message
                message1 = (MessageTest)formatter.Deserialize(new MemoryStream(buffer));  //--> crash here, update later
                Console.WriteLine(message1.title + "\n" + message1.content + "\n");

                System.Threading.Thread.Sleep(1000);
            }

            Console.WriteLine("ReadDataMsg end");
        }


        void ReadData_CreateViewAccessor()
        {
            // open the memory-mapped with a 'map name' of 'test'  
            MemoryMappedFile mmf = MemoryMappedFile.OpenExisting("test");
            MemoryMappedViewAccessor accessor = mmf.CreateViewAccessor();

            //Pos 500, read number
            int value = accessor.ReadInt32(500);
            Console.WriteLine("The answer is {0}", value);

            //Pos 504, read struct 
            accessor.Read<MessageTest_t>(504, out MessageTest_t strST);
            Console.WriteLine("The answer is {0} /  {1} ", strST.id1 , strST.id2);

            //Pos 520 and 522, read string
            ushort Size = accessor.ReadUInt16(520);
            byte[] Buffer = new byte[Size];
            accessor.ReadArray(520 + 2, Buffer, 0, Buffer.Length);
            Console.WriteLine(ASCIIEncoding.ASCII.GetString(Buffer));

            // dispose of the memory-mapped file object and its accessor  
            //accessor.Dispose();
            //mmf.Dispose();
        }
    }
}




