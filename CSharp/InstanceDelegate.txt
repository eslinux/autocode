
https://www.c-sharpcorner.com/UploadFile/8911c4/singleton-design-pattern-in-C-Sharp/


1. Using .NET 4's Lazy<T> type


public sealed class Singleton    
{    
    private Singleton()    
    {  
	
    }   
	
    private static readonly Lazy<Singleton> lazy = new Lazy<Singleton>(() => new Singleton());    
    public static Singleton Instance => lazy.Value;
}   




2. No Thread Safe Singleton

public sealed class Singleton1 {  
    private Singleton1() {}  
    private static Singleton1 instance = null;  
    public static Singleton1 Instance {  
        get {  
            if (instance == null) {  
                instance = new Singleton1();  
            }  
            return instance;  
        }  
    }  
}  




