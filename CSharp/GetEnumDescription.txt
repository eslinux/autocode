void testGetEnumDescription()
{
	string description = GetDescriptionEnum(MyEnum.HereIsAnother);
	Console.WriteLine($"Name = {MyEnum.HereIsAnother.ToString()}, des = {description}, value = {(int)MyEnum.HereIsAnother}");


	int colIndex = GetValueOfEnum<MyEnum>("HereIsAnother");
	Console.WriteLine($"colIndex = {colIndex}");
	
	string colName = GetNameOfEnum<MyEnum>(2);
    Console.WriteLine($"colName = {colName}");
}


public enum MyEnum
{
	[Description("My name is")]
	Name1 = 1,

	[Description("Here is another")]
	HereIsAnother,

	[Description("Last one")]
	LastOne
}


public static string GetDescriptionEnum(Enum val)
{
	FieldInfo fileInfo = val.GetType().GetField(val.ToString());
	DescriptionAttribute[] attributesList = fileInfo.GetCustomAttributes(typeof(DescriptionAttribute), false) as DescriptionAttribute[];
	if (attributesList != null && attributesList.Any())
	{
		return attributesList.First().Description;
	}
	return val.ToString();
}

public static int GetValueOfEnum<T>(string item_Name)
{
	Array dgv_Col_List = Enum.GetValues(typeof(T));
	foreach (var item in dgv_Col_List)
	{
		Console.WriteLine($"col name= {item}, value = {(int)item}");
		if (item_Name == item.ToString()) return (int)item;
	}
	return -1;
}


public static string GetNameOfEnum<T>(int item_Value)
{
	Array dgv_Col_List = Enum.GetValues(typeof(T));
	foreach (var itemCol in dgv_Col_List)
	{
		if (item_Value == (int)itemCol) return itemCol.ToString();
	}
	return string.Empty;
}