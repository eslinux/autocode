

using namespace System::Net;
using namespace System::Net::Sockets;

namespace ClassLibraryCLI {
	public ref class SocketTest
	{

	public:
		SocketTest()
		{

		}

		void createSocketClient() {
			int serverPort = 11111;
			IPAddress^ ipAddr = IPAddress::Parse("127.0.0.1");
			IPEndPoint^ localEndPoint = gcnew IPEndPoint(ipAddr, serverPort);


			//IPHostEntry ^ipHost = Dns::GetHostEntry(Dns::GetHostName());
			//IPAddress ^ipAddr = ipHost->AddressList[0];
			//IPEndPoint ^localEndPoint = gcnew IPEndPoint(ipAddr, 11111);

			Socket ^sender = gcnew Socket(ipAddr->AddressFamily, SocketType::Stream, ProtocolType::Tcp);


			try {
				// Connect Socket to the remote 
				// endpoint using method Connect()
				sender->Connect(localEndPoint);

				// We print EndPoint information 
				// that we are connected
				Console::WriteLine("Socket connected to -> {0} ", sender->RemoteEndPoint->ToString());
				
				// Creation of messagge that
				// we will send to Server
				array<Byte> ^messageSent = Encoding::ASCII->GetBytes("Test Client<EOF>");
				int byteSent = sender->Send(messageSent);

				// Data buffer
				array<Byte> ^ messageReceived = gcnew array< Byte >(1024);

				// We receive the messagge using 
				// the method Receive(). This 
				// method returns number of bytes
				// received, that we'll use to 
				// convert them to string
				int byteRecv = sender->Receive(messageReceived);
				String ^recvmsg = Encoding::ASCII->GetString(messageReceived, 0, byteRecv);

				Console::WriteLine("Message from Server -> {0}", recvmsg);

				// Close Socket using 
				// the method Close()
				sender->Shutdown(SocketShutdown::Both);
				sender->Close();

			}
			catch(Exception ^e){
				Console::WriteLine("Exception !!");
			}
		}


		void createSocketServer() {
			// Establish the local endpoint 
			// for the socket. Dns.GetHostName
			// returns the name of the host 
			// running the application.
			int serverPort = 11111;
			IPAddress^ ipAddr = IPAddress::Parse("127.0.0.1");
			IPEndPoint^ localEndPoint = gcnew IPEndPoint(ipAddr, serverPort);



			// Creation TCP/IP Socket using 
			// Socket Class Costructor
			Socket ^listener = gcnew Socket(ipAddr->AddressFamily, SocketType::Stream, ProtocolType::Tcp);

			try
			{

				// Using Bind() method we associate a
				// network address to the Server Socket
				// All client that will connect to this 
				// Server Socket must know this network
				// Address
				listener->Bind(localEndPoint);

				// Using Listen() method we create 
				// the Client list that will want
				// to connect to Server
				listener->Listen(10);

				while (true)
				{

					Console::WriteLine("Waiting connection ... ");

					// Suspend while waiting for
					// incoming connection Using 
					// Accept() method the server 
					// will accept connection of client
					Socket ^clientSocket = listener->Accept();

					// Data buffer
					array<Byte> ^ bytes = gcnew array< Byte >(1024);
					String ^data = "";

					while (true)
					{

						int numByte = clientSocket->Receive(bytes);

						data += Encoding::ASCII->GetString(bytes, 0, numByte);

						if (data->IndexOf("<EOF>") > -1)
							break;
					}

					Console::WriteLine("Text received -> {0} ", data);
					array<Byte> ^message  = Encoding::ASCII->GetBytes("Test Server");

					// Send a message to Client 
					// using Send() method
					clientSocket->Send(message);

					// Close client Socket using the
					// Close() method. After closing,
					// we can use the closed Socket 
					// for a new Client Connection
					clientSocket->Shutdown(SocketShutdown::Both);
					clientSocket->Close();
				}
			}

			catch (Exception ^e)
			{
				Console::WriteLine(e->ToString());
			}
		}
	};

}
